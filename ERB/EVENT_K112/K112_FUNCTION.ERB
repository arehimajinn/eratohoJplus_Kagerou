;-------------------------------------------------
;CERTER用X軸調整関数@CENTERCUTIN
;	引数LINE	：桁数。下に入れる改行の数。
;	引数TEXTS:n	：表示する文字。改行したい場合は一旦区切り、次の引数に続きを入れること。
;
;	つまりFULLCUTINで真ん中にするために横だけ揃えてくれるものです。
;-------------------------------------------------
@CENTERCUTIN(LINE, TEXTS, TEXTS:1 = "VOID", TEXTS:2 = "VOID", TEXTS:3 = "VOID", TEXTS:4 = "VOID", TEXTS:5 = "VOID", TEXTS:6 = "VOID", TEXTS:7 = "VOID", TEXTS:8 = "VOID", TEXTS:9 = "VOID", TEXTS:10 = "VOID", TEXTS:11 = "VOID", TEXTS:12 = "VOID", TEXTS:13 = "VOID", TEXTS:14 = "VOID", TEXTS:15 = "VOID", TEXTS:16 = "VOID", TEXTS:17 = "VOID", TEXTS:18 = "VOID", TEXTS:19 = "VOID", TEXTS:20 = "VOID", TEXTS:21 = "VOID", TEXTS:22 = "VOID", TEXTS:23 = "VOID", TEXTS:24 = "VOID", TEXTS:25 = "VOID", TEXTS:26 = "VOID", TEXTS:27 = "VOID", TEXTS:28 = "VOID", TEXTS:29 = "VOID", ARG:2 = 8)
#DIM LINE
#DIMS ALI
#DIMS TEXTS, 30
ALI '= CURRENTALIGN()
ALIGNMENT CENTER
CALL FULLCUTIN(0, LINE, TEXTS, TEXTS:1, TEXTS:2, TEXTS:3, TEXTS:4, TEXTS:5, TEXTS:6, TEXTS:7, TEXTS:8, TEXTS:9, TEXTS:10, TEXTS:11, TEXTS:12, TEXTS:13, TEXTS:14, TEXTS:15, TEXTS:16, TEXTS:17, TEXTS:18, TEXTS:19, TEXTS:20, TEXTS:21, TEXTS:22, TEXTS:23, TEXTS:24, TEXTS:25, TEXTS:26, TEXTS:27, TEXTS:28, TEXTS:29, ARG:2)
CALL ALIGNMENTS(ALI)
RETURN RESULT

;-------------------------------------------------
;FADEOUT用Y軸調整関数@FADEOUTLINE
;	引数LINE	：桁数。下に入れる改行の数。
;	引数FRAME	：コマ数。多くするほどゆるやかになる。
;	引数TEXTS:n	：表示する文字。改行したい場合は一旦区切り、次の引数に続きを入れること。
;
;-------------------------------------------------
@FADEOUTLINE(LINE, FRAME, TEXTS, TEXTS:1 = "VOID", TEXTS:2 = "VOID", TEXTS:3 = "VOID", TEXTS:4 = "VOID", TEXTS:5 = "VOID", TEXTS:6 = "VOID", TEXTS:7 = "VOID", TEXTS:8 = "VOID", TEXTS:9 = "VOID", TEXTS:10 = "VOID", TEXTS:11 = "VOID", TEXTS:12 = "VOID", TEXTS:13 = "VOID", TEXTS:14 = "VOID", TEXTS:15 = "VOID", TEXTS:16 = "VOID", TEXTS:17 = "VOID", TEXTS:18 = "VOID", TEXTS:19 = "VOID", TEXTS:20 = "VOID", TEXTS:21 = "VOID", TEXTS:22 = "VOID", TEXTS:23 = "VOID", TEXTS:24 = "VOID", TEXTS:25 = "VOID", TEXTS:26 = "VOID", TEXTS:27 = "VOID", TEXTS:28 = "VOID", TEXTS:29 = "VOID")
#DIM LINE
#DIM TEXT_LOOP
#DIM FRAME
#DIM NEWLINE
#DIM TEXT_COUNT
#DIMS TEXTS, 30
FOR TEXT_LOOP, 0, 30
	SIF TEXTS:TEXT_LOOP != "VOID"
		TEXT_COUNT++
NEXT
FOR NEWLINE, TEXT_COUNT, LINE + TEXT_COUNT
	TEXTS:LOCAL '= " "
NEXT
CALL FADEOUT(FRAME, TEXTS, TEXTS:1, TEXTS:2, TEXTS:3, TEXTS:4, TEXTS:5, TEXTS:6, TEXTS:7, TEXTS:8, TEXTS:9, TEXTS:10, TEXTS:11, TEXTS:12, TEXTS:13, TEXTS:14, TEXTS:15, TEXTS:16, TEXTS:17, TEXTS:18, TEXTS:19, TEXTS:20, TEXTS:21, TEXTS:22, TEXTS:23, TEXTS:24, TEXTS:25, TEXTS:26, TEXTS:27, TEXTS:28, TEXTS:29, 0)
RETURN RESULT

;-------------------------------------------------
;FADEIN用横幅調整関数@FADEINLINE
;	引数LINE	：桁数。下に入れる改行の数。
;	引数FRAME	：コマ数。多くするほどゆるやかになる。
;	引数TEXTS:n	：表示する文字。改行したい場合は一旦区切り、次の引数に続きを入れること。
;
;-------------------------------------------------
@FADEINLINE(LINE, FRAME, TEXTS, TEXTS:1 = "VOID", TEXTS:2 = "VOID", TEXTS:3 = "VOID", TEXTS:4 = "VOID", TEXTS:5 = "VOID", TEXTS:6 = "VOID", TEXTS:7 = "VOID", TEXTS:8 = "VOID", TEXTS:9 = "VOID", TEXTS:10 = "VOID", TEXTS:11 = "VOID", TEXTS:12 = "VOID", TEXTS:13 = "VOID", TEXTS:14 = "VOID", TEXTS:15 = "VOID", TEXTS:16 = "VOID", TEXTS:17 = "VOID", TEXTS:18 = "VOID", TEXTS:19 = "VOID", TEXTS:20 = "VOID", TEXTS:21 = "VOID", TEXTS:22 = "VOID", TEXTS:23 = "VOID", TEXTS:24 = "VOID", TEXTS:25 = "VOID", TEXTS:26 = "VOID", TEXTS:27 = "VOID", TEXTS:28 = "VOID", TEXTS:29 = "VOID")
#DIM LINE
#DIM TEXT_LOOP
#DIM FRAME
#DIM NEWLINE
#DIM TEXT_COUNT
#DIMS TEXTS, 30
FOR TEXT_LOOP, 0, 30
	SIF TEXTS:TEXT_LOOP != "VOID"
		TEXT_COUNT++
NEXT
FOR NEWLINE, TEXT_COUNT, LINE + TEXT_COUNT
	TEXTS:LOCAL '= " "
NEXT
CALL FADEIN(FRAME, TEXTS, TEXTS:1, TEXTS:2, TEXTS:3, TEXTS:4, TEXTS:5, TEXTS:6, TEXTS:7, TEXTS:8, TEXTS:9, TEXTS:10, TEXTS:11, TEXTS:12, TEXTS:13, TEXTS:14, TEXTS:15, TEXTS:16, TEXTS:17, TEXTS:18, TEXTS:19, TEXTS:20, TEXTS:21, TEXTS:22, TEXTS:23, TEXTS:24, TEXTS:25, TEXTS:26, TEXTS:27, TEXTS:28, TEXTS:29)
RETURN RESULT

;-------------------------------------------------
;ALIGNMENT用文字列指定関数@ALIGNMENTS
;	引数ARGS	：ALIGNMENTの指定。"LEFT", "CENTER", "RIGHT"のどれか。
;
;	文字列としてALIGNMENTの取得が出来ても指定は出来なかったので。
;-------------------------------------------------
@ALIGNMENTS(ALI)
#DIMS ALI
SELECTCASE ALI
	CASE "LEFT"
		ALIGNMENT LEFT
	CASE "CENTER"
		ALIGNMENT CENTER
	CASE "RIGHT"
		ALIGNMENT RIGHT
	CASEELSE
		THROW 正しくない文字列が指定されました！　文字列：%ALI%
ENDSELECT
RETURN RESULT

;-------------------------------------------------
;横幅調整関数@CENTERLINE
;	引数TEXTS	：真ん中にしたい文字列。
;
;	FADEOUTとかで文字数が代わるとずれるのでそれを簡単にするために。
;-------------------------------------------------
;真ん中に表示する場合の空白数を返す関数
@CENTERLINE(TEXTS)
#FUNCTION
#DIMS TEXTS
RETURNF (STRLENS(GETLINESTR(" ")) / 2) - STRLENS(TEXTS) / 2

;-------------------------------------------------
;衣装所持判定用関数@HAVE_COSTUME
;	引数COSTUME_NAME	：衣装名。
;	返り値				：0or1, 持っていれば1。
;
;	悲しいことに本体はビット管理だったので……ちなみに学ランは0ビット目だ。
;-------------------------------------------------
@HAVE_COSTUME(COSTUME_NAME)
#FUNCTION
#DIMS COSTUME, 25
#DIMS COSTUME_NAME
{
	COSTUME '= "学ラン_セーラー服_ブルマ_水着_スクール水着（紺）_スクール水着（白）"
	+ "_白衣_ナース服_女性警察官制服_ボンテージスーツ_浴衣_巫女服_博麗霊夢のコスプレ"
	+ "_東風谷早苗のコスプレ_メイド服_十六夜咲夜のコスプレ_リボン_小悪魔風衣装"
	+ "魔法少女コスチューム_ゴシックロリータ衣装_バニーガール_Yシャツ_普段着"
	+ "%CALLNAME:MASTER%の服"
}
;名前がないとエラー投げる
SIF !STRCOUNT(COSTUME, COSTUME_NAME)
	THROW 服の名前の指定が間違っています！　服の名前：%COSTUME_NAME%
SPLIT COSTUME, "_", COSTUME
;パッチに対する一時的な対応
SIF ITEMNAME:201 == ""
	RETURNF GETBIT(FLAG:所持衣装, FINDELEMENT(COSTUME, COSTUME_NAME))
RETURNF ITEM:(201 + FINDELEMENT(COSTUME, COSTUME_NAME))

;-------------------------------------------------
;調教メンバー判定関数@TRAIN_MEMBER
;	引数CHARACTER	：居るかどうか調べたいキャラのNO。キャラ番号（キャラ登録番号ではない）を入れる。
;	返り値			：0or1。居れば1。
;
;	妹様口上を参考に作りました。
;-------------------------------------------------
@TRAIN_MEMBER(CHARACTER)
#FUNCTION
#DIM CHARACTER
SIF NO:MASTER == CHARACTER || ASSINO() == CHARACTER
	RETURNF 1
RETURNF 0

;-------------------------------------------------
;複数素質判定関数@TALENTGROUP
;	引数CHARACTER		：素質を持ってるどうか調べたいキャラのNO。キャラ登録番号（キャラ番号ではない）を入れる。
;	引数TALENT_NUMBER:n	：素質の番号。
;	返り値				：素質を持っている数。
;
;-------------------------------------------------
@TALENTGROUP(CHARACTER, TALENT_NUMBER, TALENT_NUMBER:1 = -1, TALENT_NUMBER:2 = -1, TALENT_NUMBER:3 = -1, TALENT_NUMBER:4 = -1, TALENT_NUMBER:5 = -1, TALENT_NUMBER:6 = -1, TALENT_NUMBER:7 = -1, TALENT_NUMBER:8 = -1, TALENT_NUMBER:9 = -1, TALENT_NUMBER:10 = -1, TALENT_NUMBER:11 = -1, TALENT_NUMBER:12 = -1, TALENT_NUMBER:13 = -1, TALENT_NUMBER:14 = -1, TALENT_NUMBER:15 = -1, TALENT_NUMBER:16 = -1, TALENT_NUMBER:17 = -1, TALENT_NUMBER:18 = -1, TALENT_NUMBER:19 = -1, TALENT_NUMBER:20 = -1, TALENT_NUMBER:21 = -1, TALENT_NUMBER:22 = -1, TALENT_NUMBER:23 = -1, TALENT_NUMBER:24 = -1, TALENT_NUMBER:25 = -1, TALENT_NUMBER:26 = -1, TALENT_NUMBER:27 = -1, TALENT_NUMBER:28 = -1, TALENT_NUMBER:29 = -1, TALENT_NUMBER:30 = -1, TALENT_NUMBER:31 = -1, TALENT_NUMBER:32 = -1, TALENT_NUMBER:33 = -1, TALENT_NUMBER:34 = -1, TALENT_NUMBER:35 = -1, TALENT_NUMBER:36 = -1, TALENT_NUMBER:37 = -1, TALENT_NUMBER:38 = -1, TALENT_NUMBER:39 = -1, TALENT_NUMBER:40 = -1, TALENT_NUMBER:41 = -1, TALENT_NUMBER:42 = -1, TALENT_NUMBER:43 = -1, TALENT_NUMBER:44 = -1, TALENT_NUMBER:45 = -1, TALENT_NUMBER:46 = -1, TALENT_NUMBER:47 = -1, TALENT_NUMBER:48 = -1, TALENT_NUMBER:49 = -1, TALENT_NUMBER:50 = -1, TALENT_NUMBER:51 = -1, TALENT_NUMBER:52 = -1, TALENT_NUMBER:53 = -1, TALENT_NUMBER:54 = -1, TALENT_NUMBER:55 = -1, TALENT_NUMBER:56 = -1, TALENT_NUMBER:57 = -1, TALENT_NUMBER:58 = -1, TALENT_NUMBER:59 = -1, TALENT_NUMBER:60 = -1, TALENT_NUMBER:61 = -1, TALENT_NUMBER:62 = -1, TALENT_NUMBER:63 = -1, TALENT_NUMBER:64 = -1, TALENT_NUMBER:65 = -1, TALENT_NUMBER:66 = -1, TALENT_NUMBER:67 = -1, TALENT_NUMBER:68 = -1, TALENT_NUMBER:69 = -1, TALENT_NUMBER:70 = -1, TALENT_NUMBER:71 = -1, TALENT_NUMBER:72 = -1, TALENT_NUMBER:73 = -1, TALENT_NUMBER:74 = -1, TALENT_NUMBER:75 = -1, TALENT_NUMBER:76 = -1, TALENT_NUMBER:77 = -1, TALENT_NUMBER:78 = -1, TALENT_NUMBER:79 = -1, TALENT_NUMBER:80 = -1, TALENT_NUMBER:81 = -1, TALENT_NUMBER:82 = -1, TALENT_NUMBER:83 = -1, TALENT_NUMBER:84 = -1, TALENT_NUMBER:85 = -1, TALENT_NUMBER:86 = -1, TALENT_NUMBER:87 = -1, TALENT_NUMBER:88 = -1, TALENT_NUMBER:89 = -1, TALENT_NUMBER:90 = -1, TALENT_NUMBER:91 = -1, TALENT_NUMBER:92 = -1, TALENT_NUMBER:93 = -1, TALENT_NUMBER:94 = -1, TALENT_NUMBER:95 = -1, TALENT_NUMBER:96 = -1, TALENT_NUMBER:97 = -1, TALENT_NUMBER:98 = -1, TALENT_NUMBER:99 = -1)
#FUNCTION
#DIM CHARACTER
#DIM TALENT_LOOP
#DIM TALENT_COUNT
#DIM TALENT_NUMBER, 100
FOR TALENT_LOOP, 0, 100
	SIF TALENT_NUMBER:TALENT_LOOP == -1
		BREAK
	SIF TALENT:CHARACTER:(TALENT_NUMBER:TALENT_LOOP)
		TALENT_COUNT++
NEXT
RETURNF TALENT_COUNT

;-------------------------------------------------
;複数調教装備判定関数@TEQUIPGROUP
;	引数CHARACTER	：TEQUIPを装着しているかどうか調べたいキャラのNO。キャラ登録番号（キャラ番号ではない）を入れる。
;	引数TEQUIP:n	：TEQUIPの番号。
;	返り値			：装着している数。
;
;	主にどれか一つでも装備していてはいけないのを簡単にする用
;-------------------------------------------------
@TEQUIPGROUP(CHARACTER, TEQUIP_NUMBER:1 = -1, TEQUIP_NUMBER:2 = -1, TEQUIP_NUMBER:3 = -1, TEQUIP_NUMBER:4 = -1, TEQUIP_NUMBER:5 = -1, TEQUIP_NUMBER:6 = -1, TEQUIP_NUMBER:7 = -1, TEQUIP_NUMBER:8 = -1, TEQUIP_NUMBER:9 = -1, TEQUIP_NUMBER:10 = -1, TEQUIP_NUMBER:11 = -1, TEQUIP_NUMBER:12 = -1, TEQUIP_NUMBER:13 = -1, TEQUIP_NUMBER:14 = -1, TEQUIP_NUMBER:15 = -1, TEQUIP_NUMBER:16 = -1, TEQUIP_NUMBER:17 = -1, TEQUIP_NUMBER:18 = -1, TEQUIP_NUMBER:19 = -1, TEQUIP_NUMBER:20 = -1, TEQUIP_NUMBER:21 = -1, TEQUIP_NUMBER:22 = -1, TEQUIP_NUMBER:23 = -1, TEQUIP_NUMBER:24 = -1, TEQUIP_NUMBER:25 = -1, TEQUIP_NUMBER:26 = -1, TEQUIP_NUMBER:27 = -1, TEQUIP_NUMBER:28 = -1, TEQUIP_NUMBER:29 = -1, TEQUIP_NUMBER:30 = -1, TEQUIP_NUMBER:31 = -1, TEQUIP_NUMBER:32 = -1, TEQUIP_NUMBER:33 = -1, TEQUIP_NUMBER:34 = -1, TEQUIP_NUMBER:35 = -1, TEQUIP_NUMBER:36 = -1, TEQUIP_NUMBER:37 = -1, TEQUIP_NUMBER:38 = -1, TEQUIP_NUMBER:39 = -1, TEQUIP_NUMBER:40 = -1, TEQUIP_NUMBER:41 = -1, TEQUIP_NUMBER:42 = -1, TEQUIP_NUMBER:43 = -1, TEQUIP_NUMBER:44 = -1, TEQUIP_NUMBER:45 = -1, TEQUIP_NUMBER:46 = -1, TEQUIP_NUMBER:47 = -1, TEQUIP_NUMBER:48 = -1, TEQUIP_NUMBER:49 = -1, TEQUIP_NUMBER:50 = -1, TEQUIP_NUMBER:51 = -1, TEQUIP_NUMBER:52 = -1, TEQUIP_NUMBER:53 = -1, TEQUIP_NUMBER:54 = -1, TEQUIP_NUMBER:55 = -1, TEQUIP_NUMBER:56 = -1, TEQUIP_NUMBER:57 = -1, TEQUIP_NUMBER:58 = -1, TEQUIP_NUMBER:59 = -1, TEQUIP_NUMBER:60 = -1, TEQUIP_NUMBER:61 = -1, TEQUIP_NUMBER:62 = -1, TEQUIP_NUMBER:63 = -1, TEQUIP_NUMBER:64 = -1, TEQUIP_NUMBER:65 = -1, TEQUIP_NUMBER:66 = -1, TEQUIP_NUMBER:67 = -1, TEQUIP_NUMBER:68 = -1, TEQUIP_NUMBER:69 = -1, TEQUIP_NUMBER:70 = -1, TEQUIP_NUMBER:71 = -1, TEQUIP_NUMBER:72 = -1, TEQUIP_NUMBER:73 = -1, TEQUIP_NUMBER:74 = -1, TEQUIP_NUMBER:75 = -1, TEQUIP_NUMBER:76 = -1, TEQUIP_NUMBER:77 = -1, TEQUIP_NUMBER:78 = -1, TEQUIP_NUMBER:79 = -1, TEQUIP_NUMBER:80 = -1, TEQUIP_NUMBER:81 = -1, TEQUIP_NUMBER:82 = -1, TEQUIP_NUMBER:83 = -1, TEQUIP_NUMBER:84 = -1, TEQUIP_NUMBER:85 = -1, TEQUIP_NUMBER:86 = -1, TEQUIP_NUMBER:87 = -1, TEQUIP_NUMBER:88 = -1, TEQUIP_NUMBER:89 = -1, TEQUIP_NUMBER:90 = -1, TEQUIP_NUMBER:91 = -1, TEQUIP_NUMBER:92 = -1, TEQUIP_NUMBER:93 = -1, TEQUIP_NUMBER:94 = -1, TEQUIP_NUMBER:95 = -1, TEQUIP_NUMBER:96 = -1, TEQUIP_NUMBER:97 = -1, TEQUIP_NUMBER:98 = -1, TEQUIP_NUMBER:99 = -1)
#FUNCTION
#DIM CHARACTER
#DIM TEQUIP_LOOP
#DIM TEQUIP_COUNT
#DIM TEQUIP_NUMBER, 100
FOR TEQUIP_LOOP, 0, 100
	SIF TEQUIP_NUMBER:TEQUIP_LOOP == -1
		BREAK
	SIF TEQUIP:(TEQUIP_NUMBER:TEQUIP_LOOP)
		TEQUIP_COUNT++
NEXT
RETURNF TEQUIP_COUNT

;-------------------------------------------------
;人間判定関数@IS_HUMAN
;	引数CHARACTER	：人間かどうか調べたいキャラ。キャラ登録番号（キャラ番号ではない）を入れる。
;						ただし-1でTARGET, 0でMASTERのNOを代わりに調べる。
;						初期値は-1(= TARGET)。
;	返り値			：0or1, 人間であれば1
;
;-------------------------------------------------
;CHARACTER(初期値-1)で指定したキャラが人間であるかチェック。-1を送るとTARGET, 0でMASTER、それ以外でキャラ登録番号入力として、人間だったら返す
@IS_HUMAN(CHARACTER = -1)
#FUNCTION
#DIM CHARACTER
RETURNF GROUPMATCH(NO:(IS_SYSTEM(CHARACTER)), 1, 2, 9, 48, 49, 50) 

;-------------------------------------------------
;妖怪判定関数@IS_YOKAI
;	引数CHARACTER	：妖怪かどうか調べたいキャラ。キャラ登録番号（キャラ番号ではない）を入れる。
;						ただし-1でTARGET, 0でMASTERのNOを代わりに調べる。
;						初期値は-1(= TARGET)。
;	返り値			：0or1, 妖怪であれば1
;
;	素質からそれっぽいものを持っているキャラクターをチェックするだけなので抜けがあるかもしれません。
;-------------------------------------------------
@IS_YOKAI(CHARACTER = -1)
#FUNCTION
#DIM CHARACTER
RETURNF TALENTGROUP(IS_SYSTEM(CHARACTER), 90, 93, 114, 119, 124, 128, 149, 213, 214, 215)

;-------------------------------------------------
;動物判定関数@IS_ANIMAL
;	引数CHARACTER	：動物かどうか調べたいキャラ。キャラ登録番号（キャラ番号ではない）を入れる。
;						ただし-1でTARGET, 0でMASTERのNOを代わりに調べる。
;						初期値は-1(= TARGET)。
;	返り値			：0or1, 動物であれば1
;
;	素質からそれっぽいものを持っているキャラクターをチェックするだけなので抜けがあるかもしれません。
;-------------------------------------------------
@IS_ANIMAL(CHARACTER = -1)
#FUNCTION
#DIM CHARACTER
;RETURNF TALENT:CHARACTER:90 || TALENT:CHARACTER:93 || TALENT:CHARACTER:124 || TALENT:CHARACTER:213 || TALENT:CHARACTER:214 || TALENT:CHARACTER:215
RETURNF TALENTGROUP(IS_SYSTEM(CHARACTER), 90, 93, 124, 213, 214, 215)

;-------------------------------------------------
;地霊殿組判定関数@IS_CHIREIDEN
;	引数CHARACTER	：地霊殿組かどうか調べたいキャラ。キャラ登録番号（キャラ番号ではない）を入れる。
;						ただし-1でTARGET, 0でMASTERのNOを代わりに調べる。
;						初期値は-1(= TARGET)。
;	返り値			：0or1, 地霊殿組であれば1
;
;-------------------------------------------------
@IS_CHIREIDEN(CHARACTER = -1)
#FUNCTION
#DIM CHARACTER
RETURNF GROUPMATCH(NO:(IS_SYSTEM(CHARACTER)), 77, 78, 79, 80, 81, 82, 83, 84)

;-------------------------------------------------
;命蓮寺組判定関数@IS_MYORENJI
;	引数CHARACTER	：命蓮寺組かどうか調べたいキャラ。キャラ登録番号（キャラ番号ではない）を入れる。
;						ただし-1でTARGET, 0でMASTERのNOを代わりに調べる。
;						初期値は-1(= TARGET)。
;	返り値			：0or1, 命蓮寺組であれば1
;
;-------------------------------------------------
@IS_MYORENJI(CHARACTER = -1)
#FUNCTION
#DIM CHARACTER
RETURNF GROUPMATCH(NO:(IS_SYSTEM(CHARACTER)), 91, 93, 94, 95, 96)

;-------------------------------------------------
;魔法使い判定関数@IS_WITCH
;	引数CHARACTER	：魔法使いかどうか調べたいキャラ。キャラ登録番号（キャラ番号ではない）を入れる。
;						ただし-1でTARGET, 0でMASTERのNOを代わりに調べる。
;						初期値は-1(= TARGET)。
;	返り値			：0or1, 魔法使いであれば1
;
;	フランドールは魔法少女をモチーフに作られているらしいので一応入っている。
;	夢見教授は科学魔法を魔法使いに入れていいのか分からなかったため入っていない。
;-------------------------------------------------
@IS_WITCH(CHARACTER = -1)
#FUNCTION
#DIM CHARACTER
;魔理沙、パチュリー、フランドール（魔法少女だとおまけ.txtで）、アリス、ユキ、マイ
RETURNF GROUPMATCH(NO:(IS_SYSTEM(CHARACTER)), 2, 8, 11, 14, 59, 60)

;-------------------------------------------------
;内部関数@IS_SYSTEM
;	引数CHARACTER	：キャラ登録番号。
;	返り値			：キャラ登録番号。ただし-1の時はTARGET, 0の時はMASTERを返す。
;
;	内部で使う以外の利点もあまりないと思いますがそのまま使えなくもありません。
;-------------------------------------------------
;上のTARGETとかMASTERを返すシステム
@IS_SYSTEM(CHARACTER)
#FUNCTION
#DIM CHARACTER
SELECTCASE CHARACTER
	CASE -1
		RETURNF TARGET
	CASE 0
		RETURNF MASTER
	CASEELSE
		SIF GETCHARA(NO:CHARACTER) == -1
			THROW エラー：対象が正しく指定されていません！
		RETURNF CHARACTER
ENDSELECT

THROW エラー：ありえない挙動です！

;TCVARを利用した調教終了でリセットされるFIRSTTIMESみたいなのを作る……？
;呼び出される→TCVARが0ならCSTRリセット＆TCVARを1に→終了でTCVARが0に。
;数値ならもうPANCTIONがあるんだよなあ

;-------------------------------------------------
;衣装所持判定用グループ関数@COSTUME_GROUP
;	引数GROUPNAME		：衣装の種類名。"学生服", "水着", "巫女服", "メイド服"だけ。
;	返り値				：0or1, 持っていれば1。
;
;	悲しいことに色々と種類があったので……
;-------------------------------------------------
;複数ある衣装のジャンル分け、持ってるものがあれば1を返す
@COSTUME_GROUP(GROUP_NAME)
#FUNCTION
#DIMS GROUP_NAME
SELECTCASE GROUP_NAME
	CASE "学生服"
		RETURNF HAVE_COSTUME("学ラン") || HAVE_COSTUME("セーラー服")
	CASE "水着"
		RETURNF HAVE_COSTUME("ブルマ") || HAVE_COSTUME("水着") || HAVE_COSTUME("スク水（紺）") || HAVE_COSTUME("スク水（白）")
	CASE "巫女服"
		RETURNF HAVE_COSTUME("巫女服") || HAVE_COSTUME("巫女服（博）") || HAVE_COSTUME("巫女服（守）")
	CASE "メイド服"
		RETURNF HAVE_COSTUME("メイド服") || HAVE_COSTUME("メイド服（紅）")
ENDSELECT

;-------------------------------------------------
;調教者同一判定関数@PLAYER_EQUAL
;	返り値		：0or1, 前回と調教者が同じであれば1。
;
;-------------------------------------------------
@PLAYER_EQUAL()
#FUNCTION
RETURNF ASSIPLAY == TFLAG:前回コマンド助手実行

;-------------------------------------------------
;胸サイズ分岐関数@BUST_WORD_K112
;	TEXT		："巨乳の場合/普通の場合/貧乳の場合"という風に入れる。
;	CUT_WORD	：区切り文字。初期値は"/"。
;	返り値		：0or1, 前回と調教者が同じであれば1。
;
;-------------------------------------------------
;送られた文字列を指定された文字で区切った後、胸の大きさに応じた文字を返す
;"巨乳/普通/貧乳"と並べて送る。
@BUST_TEXT_K112(TEXT, CUT_WORD = "/")
#FUNCTIONS
#DIMS TEXT
#DIMS CUT_WORD
#DIMS RETURN_TEXT, 3

SPLIT TEXT, CUT_WORD, RETURN_TEXT
SIF TALENT:巨乳
	RETURNF RETURN_TEXT:0
SIF TALENT:貧乳
	RETURNF RETURN_TEXT:2
RETURNF RETURN_TEXT:1

;-------------------------------------------------
;乱数初回判定関数@ONCERAND
;	RAND_SIZE	：RAND:nのnの部分のように乱数の大きさを入れる。100まで可。
;	RAND_NAME	：判別用文字。文字ごとに選ばれた乱数があるかどうかを判定している。
;	返り値		：RAND:RAND_SIZE。ただし一度選ばれた乱数は選ばれない。
;
;	一度選ばれた乱数を選ばないようにする関数。
;	一回の起動で10000より多く別々の文字で判定しようとするとエラーが出る。
;	なので10000より多い場合はそのままRAND:RAND_SIZEで返す。
;	また、再起動すると保存が失われ、判定が最初からになる。
;	全ての乱数が選ばれた場合、判定をリセットする。
;-------------------------------------------------
@ONCERAND(RAND_SIZE, RAND_NAME)
#FUNCTION
#DIM RAND_SIZE
#DIM RAND_CHECK
#DIM RAND_RESET
#DIM SEARCH_RESULT
#DIM SELECTED_RAND
#DIM SAVEFLAG, 10000, 100
#DIMS RAND_NAME
#DIMS CHECK_NAME, 10000
;RAND_NAMEで指定した文字列が今までに一度も入っていない
IF FINDLASTELEMENT(CHECK_NAME, RAND_NAME, 0, , 1) == -1
	;文字列が入っている最後の次の場所にRAND_NAMEを代入
	SEARCH_RESULT = FINDLASTELEMENT(CHECK_NAME, ".", 0) + 1
	;もし一回の起動で10000より多く乱数名を保存しようとした場合、エラーが起きることが想定される。
	;その場合の応急処置として、これ以上保存できない場合に、完全にランダムで乱数を返す。
	SIF SEARCH_RESULT == 10000
		RETURNF RAND:RAND_SIZE
	CHECK_NAME:SEARCH_RESULT '= RAND_NAME
	;乱数が選ばれたことを保存する。
	SELECTED_RAND = RAND:RAND_SIZE
	SAVEFLAG:SEARCH_RESULT:SELECTED_RAND = 1
;あった
ELSE
	;文字列が入っている場所をSEARCH_RESULTに。
	SEARCH_RESULT = FINDLASTELEMENT(CHECK_NAME, RAND_NAME, 0, , 1)
	;全ての乱数が選択されたかチェック。
	FOR RAND_CHECK, 0, RAND_SIZE
		SELECTED_RAND += SAVEFLAG:SEARCH_RESULT:RAND_CHECK
	NEXT
	;全ての乱数が選択されていればリセット。
	IF RAND_SIZE == SELECTED_RAND
		FOR RAND_RESET, 0, RAND_SIZE
			SAVEFLAG:SEARCH_RESULT:RAND_RESET = 0
		NEXT
	ENDIF
	;乱数取得の処理。
	WHILE 1
		;乱数を取得。
		SELECTED_RAND = RAND:RAND_SIZE
		;選ばれたことのある乱数ならやり直し。
		SIF SAVEFLAG:SEARCH_RESULT:SELECTED_RAND == 1
			CONTINUE
		BREAK
	WEND
	;選ばれた乱数を記憶。
	SAVEFLAG:SEARCH_RESULT:SELECTED_RAND = 1
ENDIF
RETURNF SELECTED_RAND

;-------------------------------------------------
;偏り乱数関数@BIASRAND
;	RAND_SIZE	：RAND:nのnの部分のように乱数の大きさを入れる。
;	BIAS		：偏りの文字。"低", "中", "高"を指定し、その通りに偏らせる。
;	返り値		：RAND:RAND_SIZE。ただし指定された通りに偏る。
;
;-------------------------------------------------
@BIASRAND(RAND_SIZE, BIAS)
#FUNCTION
#DIM RAND_SIZE
#DIMS BIAS
SELECTCASE BIAS
	CASE "低"
		;乱数二つを掛け合わせたものを平方する。
		RETURNF SQRT(RAND:RAND_SIZE * RAND:RAND_SIZE)
	CASE "中"
		;乱数二つを足し合わせたものを2で割る。
		RETURNF (RAND:RAND_SIZE + RAND:RAND_SIZE) / 2
	CASE "高"
		;乱数の最大値から乱数のBIASRANDの"低"で得られた乱数を引く。
		RETURNF RAND_SIZE - BIASRAND(RAND_SIZE, "低")
ENDSELECT
;無かったらエラー飛ばす。
THROW BIASで指定された文字列が変です！　内容:%BIAS%

;-------------------------------------------------
;負乱数関数@NEGARAND
;	RAND_SIZE	：RAND:nのnの部分のように乱数の大きさを入れる。
;	返り値		：RAND:RAND_SIZE。ただし * -1するため負になる。
;
;-------------------------------------------------
@NEGARAND(RAND_SIZE)
#FUNCTION
#DIM RAND_SIZE
RETURNF RAND:RAND_SIZE * -1

;-------------------------------------------------
;時間帯関数@IS_TIMEZONE
;	ZONE		："昼", "夜"のどちらかを指定する。
;	返り値		：指定した時間帯ならば1。そうでなければ0。
;
;-------------------------------------------------
@IS_TIMEZONE(ZONE)
#FUNCTION
#DIMS ZONE
SIF ZONE == "昼"
	RETURNF !TIME
SIF ZONE == "夜"
	RETURNF TIME == 1
THROW 時間帯の指定が変です！　内容：%ZONE%

;-------------------------------------------------
;天気関数@IS_WEATHER
;	WEATHER_NAME	："晴れ", "快晴", "曇り", "雨", "大雨", "雪", "吹雪", "雪狐の嫁入り", "細氷"のどれかを指定する。
;	返り値			：指定した天気ならば1。そうでなければ0。
;
;-------------------------------------------------
@IS_WEATHER(WEATHER_NAME)
#FUNCTION
#DIMS WEATHER_NAME
#DIMS WEATHER, 9
SPLIT "晴れ_快晴_曇り_雨_大雨_雪_吹雪_狐の嫁入り_細氷", "_", WEATHER
RETURNF WEATHER_NAME == WEATHER:(TIME:5)

;-------------------------------------------------
;天気分類関数@WEATHER
;	GROUP_NAME	："晴れ", "雨", "雪"のどれかを指定する。
;	返り値		：指定した分類に属する天気ならば1。そうでなければ0。
;
;-------------------------------------------------
@WEATHER_GROUP(GROUP_NAME)
#FUNCTION
#DIMS GROUP_NAME
SELECTCASE GROUP_NAME
	CASE "晴れ"
		RETURNF IS_WEATHER("晴れ") || IS_WEATHER("快晴")
	CASE "雨"
		RETURNF IS_WEATHER("雨") || IS_WEATHER("大雨")
	CASE "雪"
		RETURNF IS_WEATHER("雪") || IS_WEATHER("吹雪")
ENDSELECT

;-------------------------------------------------
;季節関数@IS_SEASON
;	SEASON_NAME		："春", "夏", "秋", "冬"のどれかを指定する。
;	返り値			：指定した季節ならば1。そうでなければ0。
;
;-------------------------------------------------
@IS_SEASON(SEASON_NAME)
#FUNCTION
#DIMS SEASON_NAME
#DIMS SEASON, 4
SPLIT "春_夏_秋_冬", "_", SEASON
RETURNF SEASON_NAME == SEASON:(DAY:2)

;-------------------------------------------------
;改行関数@NEWLINE
;	LINE_NUM		：改行数を指定する。
;
;-------------------------------------------------
@NEWLINE(LINE_NUM)
#DIM NEWLINE_LOOP
#DIM LINE_NUM
FOR NEWLINE_LOOP, 0, LINE_NUM
	PRINTL
NEXT
RETURN RESULT
